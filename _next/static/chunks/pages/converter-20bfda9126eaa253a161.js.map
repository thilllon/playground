{"version":3,"sources":["webpack://_N_E/./utils/converter.js","webpack://_N_E/./pages/converter/index.jsx","webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?03a5"],"names":["KOR_KEY","ENG_KEY","MID_DATA","BOT_DATA","convertK2E","target","result","length","i","ch","charAt","inUnicode","charCodeAt","iTop","indexOf","iMid","iBot","keyIdxArr","idx","Math","floor","forEach","elem","makeHangul","t","m1","m2","b1","b2","unicodeMidIdx","unicodeBotIdx","unicodeTopIdx","String","fromCharCode","areSynthesizableVowels","syl1","syl2","some","areSynthesizableConsonants","convertKorEng","mode","text","tmp","raw","charCode","flush","toLowerCase","convertE2K","convertURL","encodeURI","encodeURIComponent","decodeURI","decodeURIComponent","convertJsonFormatter","onClickCheckbox","options","alert","convertBase64","checked","btoa","split","join","err","atob","Converter","Container","maxWidth","ToolbarSpacer","id","Typography","variant","component","Link","href","ConverterForm","radioList","label","value","onConvert","checkboxName","labelForCheckboxHelper","labelForCheckbox","gutterBottom","description","selectList","selectorLabel","labelForSelector","labelForSelectorShort","window","__NEXT_P","push"],"mappings":"gLAQMA,EACJ,yMACIC,EAAU,oCAEVC,EAAW,iIACXC,EAAW,qKAEJC,EAAoB,SAACC,GAMhC,IAAIC,EAAS,GACb,GAAsB,IAAlBD,EAAOE,OAAc,OAAOD,EAChC,IAAK,IAAIE,EAAI,EAAGA,EAAIH,EAAOE,OAAQC,IAAK,CACtC,IAAMC,EAAKJ,EAAOK,OAAOF,GAErBG,EAAYF,EAAGG,WAAW,GAC1BC,EAhBS,qHAgBOC,QAAQL,GACxBM,EAAOb,EAASY,QAAQL,GACxBO,EAAOb,EAASW,QAAQL,GACtBQ,EAAY,EAAE,GAAI,GAAI,GAAI,GAAI,GAEpC,GAAI,OAAUN,GAAaA,GAAa,MAAQ,CAG9C,IAAIO,EAAMP,EAAY,MACtBM,EAAU,GAAKE,KAAKC,MAAMF,EAAM,KAChCD,EAAU,GAAKE,KAAKC,MAAMF,EAAM,IAAM,GACtCD,EAAU,GAAMC,EAAM,GAAM,OACT,IAAVL,EACTI,EAAU,GAAKJ,GACI,IAAVE,EACTE,EAAU,GAAKF,GACI,IAAVC,EACTC,EAAU,GAAKD,EAEfV,GAAUG,EAIRQ,EAAU,IAKQ,IAAlBA,EAAU,KACS,IAAjBA,EAAU,IAEZA,EAAU,GAAK,GACfA,EAAU,GAAK,IACW,KAAjBA,EAAU,IAEnBA,EAAU,GAAK,GACfA,EAAU,GAAK,IACW,KAAjBA,EAAU,IAEnBA,EAAU,GAAK,GACfA,EAAU,GAAK,IACW,KAAjBA,EAAU,IAEnBA,EAAU,GAAK,GACfA,EAAU,GAAK,IACW,KAAjBA,EAAU,IAEnBA,EAAU,GAAK,GACfA,EAAU,GAAK,IACW,KAAjBA,EAAU,IAEnBA,EAAU,GAAK,GACfA,EAAU,GAAK,IACW,KAAjBA,EAAU,IAEnBA,EAAU,GAAK,GACfA,EAAU,GAAK,KAEfA,EAAU,GAAKjB,EAAQc,QAAQZ,EAASQ,OAAOO,EAAU,KACzDA,EAAU,IAAM,KAKE,IAAlBA,EAAU,KACS,IAAjBA,EAAU,IAEZA,EAAU,GAAK,EACfA,EAAU,GAAK,GACW,IAAjBA,EAAU,IAEnBA,EAAU,GAAK,EACfA,EAAU,GAAK,IACW,IAAjBA,EAAU,IAEnBA,EAAU,GAAK,EACfA,EAAU,GAAK,IACW,IAAjBA,EAAU,IAEnBA,EAAU,GAAK,EACfA,EAAU,GAAK,GACW,IAAjBA,EAAU,IAEnBA,EAAU,GAAK,EACfA,EAAU,GAAK,GACW,KAAjBA,EAAU,IAEnBA,EAAU,GAAK,EACfA,EAAU,GAAK,GACW,KAAjBA,EAAU,IAEnBA,EAAU,GAAK,EACfA,EAAU,GAAK,GACW,KAAjBA,EAAU,IAEnBA,EAAU,GAAK,EACfA,EAAU,GAAK,IACW,KAAjBA,EAAU,IAEnBA,EAAU,GAAK,EACfA,EAAU,GAAK,IACW,KAAjBA,EAAU,IAEnBA,EAAU,GAAK,EACfA,EAAU,GAAK,IACW,KAAjBA,EAAU,IAEnBA,EAAU,GAAK,EACfA,EAAU,GAAK,IAEfA,EAAU,GAAKjB,EAAQc,QAAQX,EAASO,OAAOO,EAAU,KACzDA,EAAU,IAAM,IAKpBA,EAAUI,SAAQ,SAACC,GACbA,GAAQ,IAAGhB,GAAUL,EAAQS,OAAOY,OAI5C,OAAOhB,GAGHiB,EAAa,SAACC,EAAGC,EAAIC,EAAIC,EAAIC,GAIjC,GAAIJ,EAAI,GAAKC,EAAK,EAChB,MAJoB,GAMtB,IACII,EACAC,EAFEC,EAAgBP,EAItB,IAAY,IAARE,EACFG,EAAgB3B,EAASY,QAAQd,EAAQyB,SACpC,GAAW,KAAPA,GAAoB,KAAPC,EACtBG,EAAgB,OACX,GAAW,KAAPJ,GAAoB,KAAPC,EACtBG,EAAgB,QACX,GAAW,KAAPJ,GAAoB,KAAPC,EACtBG,EAAgB,QACX,GAAW,KAAPJ,GAAoB,KAAPC,EACtBG,EAAgB,QACX,GAAW,KAAPJ,GAAoB,KAAPC,EACtBG,EAAgB,QACX,GAAW,KAAPJ,GAAoB,KAAPC,EACtBG,EAAgB,OACX,IAAW,KAAPJ,GAAoB,KAAPC,EAGtB,MA3BoB,GAyBpBG,EAAgB,GAKlB,IAAY,IAARD,EACFE,EAAgB3B,EAASW,QAAQd,EAAQ2B,SACpC,GAAW,IAAPA,GAAmB,IAAPC,EACrBE,EAAgB,OACX,GAAW,IAAPH,GAAmB,KAAPC,EACrBE,EAAgB,OACX,GAAW,IAAPH,GAAmB,KAAPC,EACrBE,EAAgB,OACX,GAAW,IAAPH,GAAmB,IAAPC,EACrBE,EAAgB,OACX,GAAW,IAAPH,GAAmB,IAAPC,EACrBE,EAAgB,OACX,GAAW,IAAPH,GAAmB,IAAPC,EACrBE,EAAgB,QACX,GAAW,IAAPH,GAAmB,IAAPC,EACrBE,EAAgB,QACX,GAAW,IAAPH,GAAmB,KAAPC,EACrBE,EAAgB,QACX,GAAW,IAAPH,GAAmB,KAAPC,EACrBE,EAAgB,QACX,GAAW,IAAPH,GAAmB,KAAPC,EACrBE,EAAgB,OACX,IAAW,IAAPH,GAAmB,IAAPC,EAGrB,MAvDoB,GAqDpBE,EAAgB,GAQlB,OAAOE,OAAOC,aACZ,MAAyB,GAAhBF,EAAqB,GAAqB,GAAhBF,EAAqBC,EAAgB,IAKtEI,EAAyB,SAACC,EAAMC,GAUpC,MAT6B,CAC3B,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,KAEqBC,MAC1B,SAACf,GAAD,OAAUA,EAAK,KAAOa,GAAQb,EAAK,KAAOc,MAKxCE,EAA6B,SAACH,EAAMC,GAcxC,MAb6B,CAC3B,CAAC,EAAG,GACJ,CAAC,EAAG,IACJ,CAAC,EAAG,IACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IACJ,CAAC,EAAG,IACJ,CAAC,EAAG,IACJ,CAAC,EAAG,IAEsBC,MAC1B,SAACf,GAAD,OAAUA,EAAK,KAAOa,GAAQb,EAAK,KAAOc,M,wBCpPxCG,EAAgB,SAACC,EAAMC,GAC3B,MAAa,QAATD,EACKpC,EAAWqC,GACA,QAATD,EDqPa,SAACnC,GACzB,IAEIC,EAAS,GACb,KAAMD,GAAUA,EAAOE,OAAS,GAAI,OAAOD,EAY3C,IAXA,IAEIoC,EAAKxB,EAAKyB,EAAKC,EAFfC,EAAQ,EAAE,GAAI,GAAI,GAAI,GAAI,GACzBrB,EAAqBqB,EANU,GAM5BpB,EAAkBoB,EANU,GAMxBnB,EAAcmB,EANU,GAMpBlB,EAAUkB,EANU,GAMhBjB,EAAMiB,EANU,GAgB3BrC,EAAI,EAAGA,EAAIH,EAAOE,OAAQC,IAK5B,KAHLoC,GADAD,EAAMtC,EAAOG,IACEI,eAGQgC,GAAY,IAC9B,IAAMA,GAAYA,GAAY,KAMjC1B,EAAMjB,EAAQa,QAAQ6B,IAEZ,GAAK1C,EAAQa,QAAQ6B,EAAIG,gBAAkB,IAEjD5B,EAAMjB,EAAQa,QAAQ6B,EAAIG,gBAN9B5B,GAAO,EAWL,GAAKA,GAAOA,GAAO,GAMjBU,GAAM,GACRtB,GAAUiB,EAAWC,EAAGC,EAAIC,EAAIC,EAAIC,GACnCJ,EAAqBqB,EAFX,GAEPpB,EAAkBoB,EAFX,GAEHnB,EAAcmB,EAFX,GAEClB,EAAUkB,EAFX,GAEKjB,EAAMiB,EAFX,GAGXrB,EAAIN,GACKS,GAAM,EAEXW,EAA2BX,EAAIT,GACjCU,EAAKV,GAELZ,GAAUiB,EAAWC,EAAGC,EAAIC,EAAIC,EAAIC,GACnCJ,EAAqBqB,EAFjB,GAEDpB,EAAkBoB,EAFjB,GAEGnB,EAAcmB,EAFjB,GAEOlB,EAAUkB,EAFjB,GAEWjB,EAAMiB,EAFjB,GAGLrB,EAAIN,GAEGQ,GAAM,GAEND,GAAM,EADfE,EAAKT,EAGIM,GAAK,GAEdlB,GAAUN,EAAQwB,GAEjBA,EAAqBqB,EAJL,GAIbpB,EAAkBoB,EAJL,GAITnB,EAAcmB,EAJL,GAILlB,EAAUkB,EAJL,GAIDjB,EAAMiB,EAJL,GAKjBrB,EAAIN,GAGJM,EAAIN,EAEG,IAAMA,GAAOA,GAAO,GAMzBU,GAAM,GACRc,EAAMd,EAENtB,GAAUiB,EAAWC,EAAGC,EAAIC,EAAIC,EADhCC,GAAM,GAELJ,EAAqBqB,EAJX,GAIPpB,EAAkBoB,EAJX,GAIHnB,EAAcmB,EAJX,GAIClB,EAAUkB,EAJX,GAIKjB,EAAMiB,EAJX,GAKXrB,EAAIkB,EACJjB,EAAKP,GACIS,GAAM,GACfe,EAAMf,EAENrB,GAAUiB,EAAWC,EAAGC,EAAIC,EAD5BC,GAAM,EAC8BC,GACnCJ,EAAqBqB,EAJJ,GAIdpB,EAAkBoB,EAJJ,GAIVnB,EAAcmB,EAJJ,GAINlB,EAAUkB,EAJJ,GAIFjB,EAAMiB,EAJJ,GAKlBrB,EAAIkB,EACJjB,EAAKP,GACIQ,GAAM,GACfpB,GAAUiB,EAAWC,EAAGC,EAAIC,EAAIC,EAAIC,GACnCJ,EAAqBqB,EAFJ,GAEdpB,EAAkBoB,EAFJ,GAEVnB,EAAcmB,EAFJ,GAENlB,EAAUkB,EAFJ,GAEFjB,EAAMiB,EAFJ,GAGlBvC,GAAUN,EAAQkB,IACTO,GAAM,EAEXS,EAAuBT,EAAIP,GAE7BQ,EAAKR,GAELZ,GAAUiB,EAAWC,EAAGC,EAAIC,EAAIC,EAAIC,GACnCJ,EAAqBqB,EAFjB,GAEDpB,EAAkBoB,EAFjB,GAEGnB,EAAcmB,EAFjB,GAEOlB,EAAUkB,EAFjB,GAEWjB,EAAMiB,EAFjB,GAGLvC,GAAUN,EAAQkB,IAEXM,GAAK,EACdC,EAAKP,EAELZ,GAAUN,EAAQkB,IAShBO,GAAM,GACRnB,GAAUiB,EAAWC,EAAGC,EAAIC,EAAIC,EAAIC,GACnCJ,EAAqBqB,EAFX,GAEPpB,EAAkBoB,EAFX,GAEHnB,EAAcmB,EAFX,GAEClB,EAAUkB,EAFX,GAEKjB,EAAMiB,EAFX,IAGFrB,GAAK,IACdlB,GAAUN,EAAQwB,GAEjBA,EAAqBqB,EAHL,GAGbpB,EAAkBoB,EAHL,GAGTnB,EAAcmB,EAHL,GAGLlB,EAAUkB,EAHL,GAGDjB,EAAMiB,EAHL,IAMnBvC,GAAUqC,GAWd,OANIlB,GAAM,EACRnB,GAAUiB,EAAWC,EAAGC,EAAIC,EAAIC,EAAIC,GAC3BJ,GAAK,IACdlB,GAAUN,EAAQwB,IAGblB,EC5XEyC,CAAWN,GAEX,IAILO,EAAa,SAACR,EAAMC,GACxB,MAAa,eAATD,EACKS,UAAUR,GACC,yBAATD,EACFU,mBAAmBT,GACR,eAATD,EACFW,UAAUV,GACC,yBAATD,EACFY,mBAAmBX,GAEnB,IAILY,EAAuB,SAACb,EAAMC,GAClC,MAAa,QAATD,GAIgB,WAATA,GAGS,WAATA,GAGS,WAATA,GAGS,WAATA,EAXF,wBAeA,IAILc,EAAkB,SAACd,EAAMC,EAAMc,GAEnCC,MAAM,QAGFC,EAAgB,SAACjB,EAAMC,EAAMc,GACjC,GAAa,kBAATf,EACF,IAEE,OAAc,OAAPe,QAAO,IAAPA,KAASG,QAAUC,KAAKlB,GAAMmB,MAAM,KAAKC,KAAK,IAAMF,KAAKlB,GAChE,MAAOqB,GACP,OAAOA,MAEJ,IAAa,kBAATtB,EAOT,MAAO,GANP,IACE,OAAOuB,KAAKtB,GACZ,MAAOqB,GACP,OAAOA,KAuHEE,UA1FG,WAChB,OACE,YAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,UAGE,YAACC,EAAA,EAAD,CAAeC,GAAG,YAClB,YAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAWC,IAAMC,KAAK,WAA/C,UARQ,8EASE,OAEV,YAACC,EAAA,EAAD,CACEC,UAAW,CACT,CAAEC,MAAO,oBAAqBC,MAAO,OACrC,CAAED,MAAO,oBAAqBC,MAAO,QAEvCC,UAAWvC,IAIb,YAAC4B,EAAA,EAAD,CAAeC,GAAG,sBAClB,YAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAWC,IAAMC,KAAK,qBAA/C,+BAGA,YAACC,EAAA,EAAD,CACEC,UAAW,CACT,CAAEC,MAAO,aAAcC,MAAO,cAC9B,CAAED,MAAO,uBAAwBC,MAAO,wBACxC,CAAED,MAAO,aAAcC,MAAO,cAC9B,CAAED,MAAO,uBAAwBC,MAAO,yBAE1CC,UAAW9B,IAIb,YAACmB,EAAA,EAAD,CAAeC,GAAG,WAClB,YAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAWC,IAAMC,KAAK,UAA/C,kCAGA,YAACC,EAAA,EAAD,CACEC,UAAW,CACT,CAAEC,MAAO,gBAAiBC,MAAO,iBACjC,CAAED,MAAO,gBAAiBC,MAAO,kBAEnCC,UAAWrB,EACXsB,aAAc,UACdC,uBAAwB,oCACxBC,iBAAkB,WAClB3B,gBAAiBA,IAInB,YAACa,EAAA,EAAD,CAAeC,GAAG,mBAClB,YAACC,EAAA,EAAD,CACEC,QAAQ,KACRC,UAAWC,IACXC,KAAK,kBACLS,cAAY,EAJd,4BAQA,YAACR,EAAA,EAAD,CACES,YACE,4BACE,2FACA,0HAIA,wKAOJC,WAAY,CACV,CAAER,MAAO,4BAA6BC,MAAO,OAC7C,CAAED,MAAO,mCAAoCC,MAAO,UACpD,CAAED,MAAO,mCAAoCC,MAAO,UACpD,CAAED,MAAO,mCAAoCC,MAAO,UACpD,CAAED,MAAO,cAAeC,MAAO,WAEjCC,UAAWzB,EACXgC,cAAe,cACfC,iBAAkB,oFAClBC,sBAAuB,+C,sBCrL1BC,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,aACA,WACE,OAAO,EAAQ,a","file":"static/chunks/pages/converter-20bfda9126eaa253a161.js","sourcesContent":["// http://www.theyt.net/wiki/%ED%95%9C%EC%98%81%ED%83%80%EB%B3%80%ED%99%98%EA%B8%B0\n\n// 초성 가지 수 19개(14개)\n// 중성 가지수 21개\n// 종성 가지수 (공백 포함) 28개, (공백제외) 27개\n// 종성 겹받침 11개\n\n// 한글키 33개\nconst KOR_KEY =\n  'ㄱㄲㄴㄷㄸㄹㅁㅂㅃㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎㅏㅐㅑㅒㅓㅔㅕㅖㅗㅛㅜㅠㅡㅣ';\nconst ENG_KEY = 'rRseEfaqQtTdwWczxvgkoiOjpuPhynbml';\nconst TOP_DATA = 'ㄱㄲㄴㄷㄸㄹㅁㅂㅃㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎ';\nconst MID_DATA = 'ㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣ';\nconst BOT_DATA = 'ㄱㄲㄳㄴㄵㄶㄷㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅄㅅㅆㅇㅈㅊㅋㅌㅍㅎ';\n\nexport const convertK2E = (() => (target) => {\n  // 한 글자가 가지는 최대 문자는 5개\n  // 된소리: 후두 근육을 긴장하면서 기식이 거의 없이 내는 자음. 'ㄲ', 'ㄸ', 'ㅃ', 'ㅆ', 'ㅉ' 따위의 소리\n  // 겹받침: 서로 다른 두 개의 자음으로 이루어진 받침. 'ㄳ', 'ㄵ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄾ', 'ㅄ' 따위\n  // 쌍자음, 겹자음은 다른 의미\n\n  let result = '';\n  if (target.length === 0) return result;\n  for (let i = 0; i < target.length; i++) {\n    const ch = target.charAt(i);\n    // 자음 / 모음 / 글자 / 한글 아닐때\n    let inUnicode = ch.charCodeAt(0);\n    let iTop = TOP_DATA.indexOf(ch);\n    let iMid = MID_DATA.indexOf(ch);\n    let iBot = BOT_DATA.indexOf(ch);\n    const keyIdxArr = [-1, -1, -1, -1, -1]; // 한글 문자는 최대 5번의 타이핑으로 이루어짐\n\n    if (0xac00 <= inUnicode && inUnicode <= 0xd7a3) {\n      // 한글 유니코드 범위: '가(0xac00)에서부터 '힣(0xd7a3)'까지\n      // keyIdxArr[2]는 이중모음인경우, keyIdxArr[4]는 겹받침인경우\n      let idx = inUnicode - 0xac00; // 몇번째 한글인지\n      keyIdxArr[0] = Math.floor(idx / (21 * 28)); // 초성\n      keyIdxArr[1] = Math.floor(idx / 28) % 21; // 중성\n      keyIdxArr[3] = (idx % 28) - 1; // 종성\n    } else if (iTop !== -1) {\n      keyIdxArr[0] = iTop; // 초성(자음)\n    } else if (iMid !== -1) {\n      keyIdxArr[1] = iMid; // 중성(모음)\n    } else if (iBot !== -1) {\n      keyIdxArr[3] = iBot; // 종성(자음)\n    } else {\n      result += ch; // 한글이 아님\n    }\n\n    // 초성\n    if (keyIdxArr[0] !== -1) {\n      // do nothing\n    }\n\n    // 중성\n    if (keyIdxArr[1] !== -1) {\n      if (keyIdxArr[1] === 9) {\n        // ㅘ\n        keyIdxArr[1] = 27;\n        keyIdxArr[2] = 19;\n      } else if (keyIdxArr[1] === 10) {\n        // ㅙ\n        keyIdxArr[1] = 27;\n        keyIdxArr[2] = 20;\n      } else if (keyIdxArr[1] === 11) {\n        // ㅚ\n        keyIdxArr[1] = 27;\n        keyIdxArr[2] = 32;\n      } else if (keyIdxArr[1] === 14) {\n        // ㅝ\n        keyIdxArr[1] = 29;\n        keyIdxArr[2] = 23;\n      } else if (keyIdxArr[1] === 15) {\n        // ㅞ\n        keyIdxArr[1] = 29;\n        keyIdxArr[2] = 24;\n      } else if (keyIdxArr[1] === 16) {\n        // ㅟ\n        keyIdxArr[1] = 29;\n        keyIdxArr[2] = 32;\n      } else if (keyIdxArr[1] === 19) {\n        // ㅢ\n        keyIdxArr[1] = 31;\n        keyIdxArr[2] = 32;\n      } else {\n        keyIdxArr[1] = KOR_KEY.indexOf(MID_DATA.charAt(keyIdxArr[1]));\n        keyIdxArr[2] = -1;\n      }\n    }\n\n    // 종성\n    if (keyIdxArr[3] !== -1) {\n      if (keyIdxArr[3] === 2) {\n        // ㄳ\n        keyIdxArr[3] = 0;\n        keyIdxArr[4] = 9;\n      } else if (keyIdxArr[3] === 4) {\n        // ㄵ\n        keyIdxArr[3] = 2;\n        keyIdxArr[4] = 12;\n      } else if (keyIdxArr[3] === 5) {\n        // ㄶ\n        keyIdxArr[3] = 2;\n        keyIdxArr[4] = 18;\n      } else if (keyIdxArr[3] === 8) {\n        // ㄺ\n        keyIdxArr[3] = 5;\n        keyIdxArr[4] = 0;\n      } else if (keyIdxArr[3] === 9) {\n        // ㄻ\n        keyIdxArr[3] = 5;\n        keyIdxArr[4] = 6;\n      } else if (keyIdxArr[3] === 10) {\n        // ㄼ\n        keyIdxArr[3] = 5;\n        keyIdxArr[4] = 7;\n      } else if (keyIdxArr[3] === 11) {\n        // ㄽ\n        keyIdxArr[3] = 5;\n        keyIdxArr[4] = 9;\n      } else if (keyIdxArr[3] === 12) {\n        // ㄾ\n        keyIdxArr[3] = 5;\n        keyIdxArr[4] = 16;\n      } else if (keyIdxArr[3] === 13) {\n        // ㄿ\n        keyIdxArr[3] = 5;\n        keyIdxArr[4] = 17;\n      } else if (keyIdxArr[3] === 14) {\n        // ㅀ\n        keyIdxArr[3] = 5;\n        keyIdxArr[4] = 18;\n      } else if (keyIdxArr[3] === 17) {\n        // ㅄ\n        keyIdxArr[3] = 7;\n        keyIdxArr[4] = 9;\n      } else {\n        keyIdxArr[3] = KOR_KEY.indexOf(BOT_DATA.charAt(keyIdxArr[3]));\n        keyIdxArr[4] = -1;\n      }\n    }\n\n    // 알파벳으로 변환\n    keyIdxArr.forEach((elem) => {\n      if (elem > -1) result += ENG_KEY.charAt(elem);\n    });\n  }\n\n  return result;\n})();\n\nconst makeHangul = (t, m1, m2, b1, b2) => {\n  const DEFAULT_VALUE = '';\n  // // t,m1,m2,b1,b2는 KOR_KEY의 인덱스\n  // // unicode*는 unicode 의 인덱스\n  if (t < 0 || m1 < 0) {\n    return DEFAULT_VALUE;\n  }\n  const unicodeTopIdx = t;\n  let unicodeMidIdx;\n  let unicodeBotIdx;\n\n  if (m2 === -1) {\n    unicodeMidIdx = MID_DATA.indexOf(KOR_KEY[m1]);\n  } else if (m1 === 27 && m2 === 19) {\n    unicodeMidIdx = 9; // ㅘ 27 19\n  } else if (m1 === 27 && m2 === 20) {\n    unicodeMidIdx = 10; // ㅙ 27 20\n  } else if (m1 === 27 && m2 === 32) {\n    unicodeMidIdx = 11; // ㅚ 27 32\n  } else if (m1 === 29 && m2 === 23) {\n    unicodeMidIdx = 14; // ㅝ 29 23\n  } else if (m1 === 29 && m2 === 24) {\n    unicodeMidIdx = 15; // ㅞ 29 24\n  } else if (m1 === 29 && m2 === 32) {\n    unicodeMidIdx = 16; // ㅟ 29 32\n  } else if (m1 === 31 && m2 === 32) {\n    unicodeMidIdx = 19; // ㅢ 31 32\n  } else {\n    return DEFAULT_VALUE;\n  }\n\n  if (b2 === -1) {\n    unicodeBotIdx = BOT_DATA.indexOf(KOR_KEY[b1]);\n  } else if (b1 === 0 && b2 === 9) {\n    unicodeBotIdx = 2; // ㄳ 0 9\n  } else if (b1 === 2 && b2 === 12) {\n    unicodeBotIdx = 4; // ㄵ 2 12\n  } else if (b1 === 2 && b2 === 18) {\n    unicodeBotIdx = 5; // ㄶ 2 18\n  } else if (b1 === 5 && b2 === 0) {\n    unicodeBotIdx = 8; // ㄺ 5 0\n  } else if (b1 === 5 && b2 === 6) {\n    unicodeBotIdx = 9; // ㄻ 5 6\n  } else if (b1 === 5 && b2 === 7) {\n    unicodeBotIdx = 10; // ㄼ 5 7\n  } else if (b1 === 5 && b2 === 9) {\n    unicodeBotIdx = 11; // ㄽ 5 9\n  } else if (b1 === 5 && b2 === 16) {\n    unicodeBotIdx = 12; // ㄾ 5 16\n  } else if (b1 === 5 && b2 === 17) {\n    unicodeBotIdx = 13; // ㄿ 5 17\n  } else if (b1 === 5 && b2 === 18) {\n    unicodeBotIdx = 14; // ㅀ 5 18\n  } else if (b1 === 7 && b2 === 9) {\n    unicodeBotIdx = 17; // ㅄ 7 9\n  } else {\n    return DEFAULT_VALUE;\n  }\n\n  // 한글 유니코드 구성 공식\n  // https://www.key-shortcut.com/en/writing-systems/%ED%95%9C%EA%B5%AD-korean-script/hangul-characters-2\n\n  return String.fromCharCode(\n    0xac00 + unicodeTopIdx * 21 * 28 + unicodeMidIdx * 28 + unicodeBotIdx + 1\n  );\n};\n\n// 두 모음이 서로 합성이 가능한지 판단해주는 함수\nconst areSynthesizableVowels = (syl1, syl2) => {\n  const possibleCombinations = [\n    [27, 19], // ㅘ\n    [27, 20], // ㅙ\n    [27, 32], // ㅚ\n    [29, 23], // ㅝ\n    [29, 24], // ㅞ\n    [29, 32], // ㅟ\n    [31, 32], // ㅢ\n  ];\n  return possibleCombinations.some(\n    (elem) => elem[0] === syl1 && elem[1] === syl2\n  );\n};\n\n// 두 자음이 서로 합성이 가능한지 판단해주는 함수\nconst areSynthesizableConsonants = (syl1, syl2) => {\n  const possibleCombinations = [\n    [0, 9], // ㄳ\n    [2, 12], // ㄵ\n    [2, 18], // ㄶ\n    [5, 0], // ㄺ\n    [5, 6], // ㄻ\n    [5, 7], // ㄼ\n    [5, 9], // ㄽ\n    [5, 16], // ㄾ\n    [5, 17], // ㄿ\n    [5, 18], // ㅀ\n    [7, 9], // ㅄ\n  ];\n  return possibleCombinations.some(\n    (elem) => elem[0] === syl1 && elem[1] === syl2\n  );\n};\n\nexport const convertE2K = (target) => {\n  const AllowShiftMistake = true;\n  const AllowEngKorMixed = false;\n  let result = '';\n  if (!(target && target.length > 0)) return result;\n  let flush = [-1, -1, -1, -1, -1];\n  let [t, m1, m2, b1, b2] = flush;\n  let tmp, idx, raw, charCode;\n\n  if (AllowEngKorMixed) {\n    // target = [...target].map((elem) => {\n    //   elem.charCodeAt()\n    //   return 'a';\n    // });\n  }\n\n  for (let i = 0; i < target.length; i++) {\n    raw = target[i]; // english alphabet\n    charCode = raw.charCodeAt();\n    if (\n      !(\n        (65 <= charCode && charCode <= 90) ||\n        (97 <= charCode && charCode <= 122)\n      )\n    ) {\n      // A-Z, a-z 아닌 경우\n      idx = -1;\n    } else {\n      idx = ENG_KEY.indexOf(raw);\n      // 쌍자음 없는데 쉬프트 누른 경우\n      if (idx < 0 && ENG_KEY.indexOf(raw.toLowerCase()) > -1) {\n        if (AllowShiftMistake) {\n          idx = ENG_KEY.indexOf(raw.toLowerCase());\n        }\n      }\n    }\n\n    if (0 <= idx && idx <= 18) {\n      // ******************************\n      // 자음인경우\n      // ******************************\n      // console.info(KOR_KEY[idx]);\n\n      if (b2 > -1) {\n        result += makeHangul(t, m1, m2, b1, b2);\n        [t, m1, m2, b1, b2] = flush;\n        t = idx;\n      } else if (b1 > -1) {\n        // 자음+자음 조합 확인\n        if (areSynthesizableConsonants(b1, idx)) {\n          b2 = idx;\n        } else {\n          result += makeHangul(t, m1, m2, b1, b2);\n          [t, m1, m2, b1, b2] = flush;\n          t = idx;\n        }\n      } else if (m2 > -1) {\n        b1 = idx;\n      } else if (m1 > -1) {\n        b1 = idx;\n      } else if (t > -1) {\n        // 자음뒤 자음\n        result += KOR_KEY[t];\n        // result += KOR_KEY[idx];\n        [t, m1, m2, b1, b2] = flush;\n        t = idx;\n      } else {\n        // 플러시 필요없음\n        t = idx;\n      }\n    } else if (19 <= idx && idx <= 32) {\n      // ******************************\n      // 모음인경우\n      // ******************************\n\n      // console.info(KOR_KEY[idx]);\n      if (b2 > -1) {\n        tmp = b2;\n        b2 = -1;\n        result += makeHangul(t, m1, m2, b1, b2);\n        [t, m1, m2, b1, b2] = flush;\n        t = tmp;\n        m1 = idx;\n      } else if (b1 > -1) {\n        tmp = b1;\n        b1 = -1;\n        result += makeHangul(t, m1, m2, b1, b2);\n        [t, m1, m2, b1, b2] = flush;\n        t = tmp;\n        m1 = idx;\n      } else if (m2 > -1) {\n        result += makeHangul(t, m1, m2, b1, b2);\n        [t, m1, m2, b1, b2] = flush;\n        result += KOR_KEY[idx];\n      } else if (m1 > -1) {\n        // 모음+모음 조합이 되는가?\n        if (areSynthesizableVowels(m1, idx)) {\n          //\n          m2 = idx;\n        } else {\n          result += makeHangul(t, m1, m2, b1, b2);\n          [t, m1, m2, b1, b2] = flush;\n          result += KOR_KEY[idx];\n        }\n      } else if (t > -1) {\n        m1 = idx;\n      } else {\n        result += KOR_KEY[idx];\n        // 뒤에 모음이 올수도 있어서 플러시 금지\n      }\n    } else {\n      // ******************************\n      // 한글이 아닌경우\n      // ******************************\n\n      // 남은 한글 처리\n      if (m1 > -1) {\n        result += makeHangul(t, m1, m2, b1, b2);\n        [t, m1, m2, b1, b2] = flush;\n      } else if (t > -1) {\n        result += KOR_KEY[t];\n        // 이미 문자가 아닌게 왔으므로 플러시 필수\n        [t, m1, m2, b1, b2] = flush;\n      }\n      // 문자 그대로 추가\n      result += raw;\n    }\n  }\n\n  // 남은 스택 처리\n  if (m1 > -1) {\n    result += makeHangul(t, m1, m2, b1, b2);\n  } else if (t > -1) {\n    result += KOR_KEY[t];\n  }\n\n  return result;\n};\n\n// 'ㄳㄵㄶㄺㄻㄼㄽㄾㄿㅀㅄ';\n// 'ㅘㅙㅚㅝㅞㅟㅢ';\n\n// 0 ㄱ\n// 1 ㄲ\n// 2 ㄳ\n// 3 ㄴ\n// 4 ㄵ\n// 5 ㄶ\n// 6 ㄷ\n// 7 ㄹ\n// 8 ㄺ\n// 9 ㄻ\n// 10 ㄼ\n// 11 ㄽ\n// 12 ㄾ\n// 13 ㄿ\n// 14 ㅀ\n// 15 ㅁ\n// 16 ㅂ\n// 17 ㅄ\n// 18 ㅅ\n// 19 ㅆ\n// 20 ㅇ\n// 21 ㅈ\n// 22 ㅊ\n// 23 ㅋ\n// 24 ㅌ\n// 25 ㅍ\n// 26 ㅎ\n\n// ㄱ 0\n// ㄴ 2\n// ㄷ 3\n// ㄹ 5\n// ㅁ 6\n// ㅂ 7\n// ㅅ 9\n// ㅈ 12\n// ㅊ 14\n// ㅋ 15\n// ㅌ 16\n// ㅍ 17\n// ㅎ 18\n\n// 19 ㅏ\n// 20 ㅐ\n// 21 ㅑ\n// 22 ㅒ\n// 23 ㅓ\n// 24 ㅔ\n// 25 ㅕ\n// 26 ㅖ\n// 27 ㅗ\n// 28 ㅛ\n// 29 ㅜ\n// 30 ㅠ\n// 31 ㅡ\n// 32 ㅣ\n\n// 'ㄳㄵㄶㄺㄻㄼㄽㄾㄿㅀㅄ';\n// ㄱ 0\n// ㄴ 2\n// ㄷ 3\n// ㄹ 5\n// ㅁ 6\n// ㅂ 7\n// ㅅ 9\n// ㅈ 12\n// ㅊ 14\n// ㅋ 15\n// ㅌ 16\n// ㅍ 17\n// ㅎ 18\n\n// 19ㅏ\n// 20ㅐ\n// 21ㅑ\n// 22ㅒ\n// 23ㅓ\n// 24ㅔ\n// 25ㅕ\n// 26ㅖ\n// 27ㅗ\n// 28ㅛ\n// 29ㅜ\n// 30ㅠ\n// 31ㅡ\n// 32ㅣ\n\n// unicodeMidIdx = 0; // ㅏ\n// unicodeMidIdx = 1; // ㅐ\n// unicodeMidIdx = 2; // ㅑ\n// unicodeMidIdx = 3; // ㅒ\n// unicodeMidIdx = 4; // ㅓ\n// unicodeMidIdx = 5; // ㅔ\n// unicodeMidIdx = 6; // ㅕ\n// unicodeMidIdx = 7; // ㅖ\n// unicodeMidIdx = 8; // ㅗ\n// unicodeMidIdx = 9; // ㅘ 27 19\n// unicodeMidIdx = 10; // ㅙ 27 20\n// unicodeMidIdx = 11; // ㅚ 27 32\n// unicodeMidIdx = 12; // ㅛ\n// unicodeMidIdx = 13; // ㅜ\n// unicodeMidIdx = 14; // ㅝ 29 23\n// unicodeMidIdx = 15; // ㅞ 29 24\n// unicodeMidIdx = 16; // ㅟ 29 32\n// unicodeMidIdx = 17; // ㅠ\n// unicodeMidIdx = 18; // ㅡ\n// unicodeMidIdx = 19; // ㅢ 31 32\n// unicodeMidIdx = 20; // ㅣ\n\n// 'ㄳㄵㄶㄺㄻㄼㄽㄾㄿㅀㅄ';\n// 'ㅘㅙㅚㅝㅞㅟㅢ';\n\n// unicodeBotIdx = 0; // ㄱ\n// unicodeBotIdx = 1; // ㄲ\n// unicodeBotIdx = 2; // ㄳ 0 9\n// unicodeBotIdx = 3; // ㄴ\n// unicodeBotIdx = 4; // ㄵ 2 12\n// unicodeBotIdx = 5; // ㄶ 2 18\n// unicodeBotIdx = 6; // ㄷ\n// unicodeBotIdx = 7; // ㄹ\n// unicodeBotIdx = 8; // ㄺ 5 0\n// unicodeBotIdx = 9; // ㄻ 5 6\n// unicodeBotIdx = 10; // ㄼ 5 7\n// unicodeBotIdx = 11; // ㄽ 5 9\n// unicodeBotIdx = 12; // ㄾ 5 16\n// unicodeBotIdx = 13; // ㄿ 5 17\n// unicodeBotIdx = 14; // ㅀ 5 18\n// unicodeBotIdx = 15; // ㅁ\n// unicodeBotIdx = 16; // ㅂ\n// unicodeBotIdx = 17; // ㅄ 7 9\n// unicodeBotIdx = 18; // ㅅ\n// unicodeBotIdx = 19; // ㅆ\n// unicodeBotIdx = 20; // ㅇ\n// unicodeBotIdx = 21; // ㅈ\n// unicodeBotIdx = 22; // ㅊ\n// unicodeBotIdx = 23; // ㅋ\n// unicodeBotIdx = 24; // ㅌ\n// unicodeBotIdx = 25; // ㅍ\n// unicodeBotIdx = 26; // ㅎ\n","import React, { useState } from 'react';\nimport { Container, Typography, Link } from '@material-ui/core';\nimport { convertK2E, convertE2K } from '@utils/converter';\nimport { ConverterForm } from '@components/converter/ConverterForm';\nimport { ToolbarSpacer } from '@components/ToolbarSpacer';\n\nconst convertKorEng = (mode, text) => {\n  if (mode === 'K2E') {\n    return convertK2E(text);\n  } else if (mode === 'E2K') {\n    return convertE2K(text);\n  } else {\n    return '';\n  }\n};\n\nconst convertURL = (mode, text) => {\n  if (mode === 'ENCODE_URL') {\n    return encodeURI(text);\n  } else if (mode === 'ENCODE_URL_COMPONENT') {\n    return encodeURIComponent(text);\n  } else if (mode === 'DECODE_URL') {\n    return decodeURI(text);\n  } else if (mode === 'DECODE_URL_COMPONENT') {\n    return decodeURIComponent(text);\n  } else {\n    return '';\n  }\n};\n\nconst convertJsonFormatter = (mode, text) => {\n  if (mode === 'TAB') {\n    // return shortid.generate();\n    return 'Under construction...';\n    // return mode;\n  } else if (mode === 'SPACE2') {\n    return 'Under construction...';\n    // return mode;\n  } else if (mode === 'SPACE3') {\n    return 'Under construction...';\n    // return mode;\n  } else if (mode === 'SPACE4') {\n    return 'Under construction...';\n    // return mode;\n  } else if (mode === 'MINIFY') {\n    return 'Under construction...';\n    // return mode;\n  } else {\n    return '';\n  }\n};\n\nconst onClickCheckbox = (mode, text, options) => {\n  // convertBase64(mode, text, options);\n  alert('TBD');\n};\n\nconst convertBase64 = (mode, text, options) => {\n  if (mode === 'ENCODE_BASE64') {\n    try {\n      // console.info('================', options.checked);\n      return options?.checked ? btoa(text).split('=').join('') : btoa(text);\n    } catch (err) {\n      return err;\n    }\n  } else if (mode === 'DECODE_BASE64') {\n    try {\n      return atob(text);\n    } catch (err) {\n      return err;\n    }\n  } else {\n    return '';\n  }\n};\n\nconst ConverterModule = ({ id, title, onConvert }) => {\n  return (\n    <Box>\n      <ToolbarSpacer id={id} />\n      <Typography variant='h6' component={Link} href={'#' + id}>\n        {title} }\n      </Typography>\n      <ConverterForm\n      // radioList={[\n      //   { label: 'Encode URL', value: 'ENCODE_URL' },\n      //   { label: 'Encode URL component', value: 'ENCODE_URL_COMPONENT' },\n      //   { label: 'Decode URL', value: 'DECODE_URL' },\n      //   { label: 'Decode URL component', value: 'DECODE_URL_COMPONENT' },\n      // ]}\n      // onConvert={convertURL}\n      />\n    </Box>\n  );\n};\n\nconst title = 'Korean-English Converter(feat. 한글이 안쳐져요)';\n\nconst Converter = () => {\n  return (\n    <Container maxWidth='lg'>\n      {/* // ****************************** */}\n      {/* // ****************************** */}\n      <ToolbarSpacer id='kor-eng' />\n      <Typography variant='h6' component={Link} href='#kor-eng'>\n        {title}{' '}\n      </Typography>\n      <ConverterForm\n        radioList={[\n          { label: 'English to Korean', value: 'E2K' },\n          { label: 'Korean to English', value: 'K2E' },\n        ]}\n        onConvert={convertKorEng}\n      />\n      {/* // ****************************** */}\n      {/* // ****************************** */}\n      <ToolbarSpacer id='url-encode-decode' />\n      <Typography variant='h6' component={Link} href='#url-encode-decode'>\n        URL Encode/Decode\n      </Typography>\n      <ConverterForm\n        radioList={[\n          { label: 'Encode URL', value: 'ENCODE_URL' },\n          { label: 'Encode URL component', value: 'ENCODE_URL_COMPONENT' },\n          { label: 'Decode URL', value: 'DECODE_URL' },\n          { label: 'Decode URL component', value: 'DECODE_URL_COMPONENT' },\n        ]}\n        onConvert={convertURL}\n      />\n      {/* // ****************************** */}\n      {/* // ****************************** */}\n      <ToolbarSpacer id='base64' />\n      <Typography variant='h6' component={Link} href='#base64'>\n        Base64 Encode/Decode\n      </Typography>\n      <ConverterForm\n        radioList={[\n          { label: 'Encode Base64', value: 'ENCODE_BASE64' },\n          { label: 'Decode Base64', value: 'DECODE_BASE64' },\n        ]}\n        onConvert={convertBase64}\n        checkboxName={'urlSafe'}\n        labelForCheckboxHelper={'Remove dangling equal(=) sign(s).'}\n        labelForCheckbox={'URL safe'}\n        onClickCheckbox={onClickCheckbox}\n      />\n      {/* // ****************************** */}\n      {/* // ****************************** */}\n      <ToolbarSpacer id='json-formatter' />\n      <Typography\n        variant='h6'\n        component={Link}\n        href='#json-formatter'\n        gutterBottom\n      >\n        JSON Formatter\n      </Typography>\n      <ConverterForm\n        description={\n          <ul>\n            <li>Input a string of text and encode or decode it as you like.</li>\n            <li>\n              Handy for turning encoded JavaScript URLs from complete gibberish\n              into readable gibberish.\n            </li>\n            <li>\n              If you'd like to have the URL Decoder/Encoder for offline use,\n              just view source and save to your hard drive. Creative Commons\n              License\n            </li>\n          </ul>\n        }\n        selectList={[\n          { label: 'Align JSON: Tab Delimited', value: 'TAB' },\n          { label: 'Align JSON: 2 Spaces Indentation', value: 'SPACE2' },\n          { label: 'Align JSON: 3 Spaces Indentation', value: 'SPACE3' },\n          { label: 'Align JSON: 4 Spaces Indentation', value: 'SPACE4' },\n          { label: 'Minify JSON', value: 'MINIFY' },\n        ]}\n        onConvert={convertJsonFormatter}\n        selectorLabel={'Indentation'}\n        labelForSelector={'들여쓰기 방식을 선택해주세요.'}\n        labelForSelectorShort={'들여쓰기 방식'}\n      />\n    </Container>\n  );\n};\n\nexport default Converter;\n// labelForSelector = 'Select Mode',\n// labelForTextInputSource = '변환할 텍스트를 입력해주세요.',\n// labelForTextInputDestination = '변환된 텍스트가 표시됩니다.',\n// labelForCopyCompleted: '복사 완료',\n// labelForClose: '닫기',\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/converter\",\n      function () {\n        return require(\"private-next-pages/converter/index.jsx\");\n      }\n    ]);\n  "],"sourceRoot":""}